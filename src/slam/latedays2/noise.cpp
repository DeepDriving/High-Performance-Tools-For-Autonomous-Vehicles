#include "noise.h"

/**
 * 256 values, randomly shuffled
 */
static int ShuffledIndexTableRoll[] = {99, 8, 28, 213, 202, 126, 
    159, 94, 74, 180, 243, 67, 86, 78, 130, 59, 248, 81, 100, 29, 
    35, 174, 181, 168, 144, 133, 209, 145, 83, 204, 207, 69, 128, 
    188, 5, 58, 236, 56, 196, 75, 218, 129, 107, 237, 176, 147, 47, 
    113, 82, 108, 106, 13, 110, 175, 118, 27, 201, 53, 239, 154, 227, 
    131, 11, 217, 173, 36, 105, 68, 179, 255, 60, 235, 88, 116, 97, 
    87, 137, 198, 178, 125, 19, 241, 152, 24, 208, 219, 238, 31, 253, 
    164, 166, 143, 139, 22, 51, 220, 3, 132, 223, 4, 52, 231, 195, 38, 
    165, 167, 169, 66, 182, 42, 161, 142, 186, 114, 15, 117, 134, 23, 
    72, 34, 48, 247, 136, 79, 127, 138, 155, 172, 26, 232, 187, 214, 
    93, 222, 14, 215, 206, 50, 216, 252, 135, 150, 80, 17, 90, 249, 6, 
    21, 54, 111, 25, 233, 170, 12, 10, 242, 189, 30, 18, 254, 148, 245, 
    191, 160, 162, 65, 230, 102, 194, 64, 226, 104, 44, 123, 84, 62, 112, 
    211, 70, 140, 55, 103, 190, 229, 250, 197, 244, 77, 120, 57, 177, 92, 
    115, 141, 251, 109, 225, 96, 98, 156, 45, 163, 119, 157, 20, 153, 
    224, 149, 49, 39, 246, 2, 212, 7, 85, 171, 101, 205, 146, 121, 124, 
    37, 203, 95, 200, 16, 9, 89, 46, 43, 234, 41, 1, 0, 33, 240, 185, 
    193, 32, 221, 228, 199, 76, 91, 183, 71, 184, 73, 122, 210, 40, 151, 
    61, 158, 63, 192
};

static int ShuffledIndexTablePitch[] = {194, 222, 162, 221, 204, 148, 
    189, 46, 156, 144, 174, 39, 179, 110, 87, 178, 218, 170, 48, 89, 
    154, 215, 62, 145, 75, 230, 180, 134, 15, 53, 224, 209, 163, 83, 
    47, 26, 34, 76, 59, 24, 106, 219, 128, 30, 49, 203, 118, 56, 58, 
    0, 187, 85, 147, 233, 193, 205, 138, 188, 181, 120, 94, 23, 117, 
    153, 140, 249, 135, 52, 107, 74, 247, 243, 142, 102, 227, 182, 25, 
    141, 248, 254, 172, 155, 67, 158, 1, 51, 28, 232, 60, 139, 199, 73, 
    173, 207, 69, 164, 91, 40, 253, 252, 169, 50, 166, 86, 210, 235, 97, 
    88, 126, 231, 41, 133, 208, 255, 123, 63, 18, 238, 33, 84, 220, 150, 
    66, 251, 202, 119, 65, 43, 108, 211, 201, 167, 197, 20, 37, 100, 4, 
    17, 136, 32, 57, 200, 98, 45, 185, 176, 35, 190, 151, 6, 175, 55, 131, 
    70, 132, 96, 237, 71, 14, 27, 246, 10, 157, 29, 112, 159, 183, 161, 
    12, 168, 236, 225, 250, 78, 171, 198, 241, 130, 82, 121, 44, 101, 143, 
    165, 42, 240, 36, 228, 113, 192, 81, 116, 104, 64, 234, 160, 195, 242, 
    129, 115, 196, 68, 149, 122, 22, 38, 127, 13, 7, 31, 103, 212, 191, 79, 
    2, 114, 184, 137, 77, 186, 61, 177, 90, 214, 125, 3, 16, 5, 54, 229, 206, 
    244, 11, 217, 105, 9, 8, 72, 109, 124, 95, 216, 92, 226, 19, 80, 239, 93, 
    146, 99, 111, 152, 245, 223, 213, 21
};

static int ShuffledIndexTableYaw[] = {14, 45, 188, 251, 90, 115, 242, 105,
    96, 93, 68, 185, 230, 38, 42, 214, 116, 63, 47, 136, 75, 219, 99, 165, 
    148, 94, 186, 254, 129, 50, 20, 71, 80, 194, 149, 240, 62, 159, 91, 
    187, 103, 21, 145, 221, 114, 211, 87, 28, 184, 157, 106, 46, 6, 72, 
    89, 1, 189, 130, 192, 247, 98, 37, 153, 54, 117, 183, 238, 152, 206, 
    241, 169, 207, 59, 161, 225, 67, 60, 171, 180, 243, 164, 252, 166, 
    233, 190, 2, 64, 17, 104, 10, 23, 15, 227, 41, 253, 112, 107, 51, 142, 
    246, 226, 66, 231, 210, 147, 92, 22, 110, 134, 13, 102, 34, 35, 69, 5, 
    162, 55, 250, 86, 113, 218, 43, 245, 198, 220, 52, 7, 9, 222, 204, 137, 
    172, 128, 224, 151, 3, 178, 84, 81, 39, 4, 201, 79, 122, 61, 56, 32, 24, 
    158, 27, 53, 154, 255, 197, 82, 141, 133, 195, 168, 216, 58, 155, 30, 
    109, 29, 200, 239, 97, 175, 217, 150, 74, 124, 237, 170, 199, 121, 40, 
    95, 212, 173, 196, 228, 208, 8, 174, 167, 215, 101, 202, 160, 191, 248, 
    83, 123, 138, 193, 144, 100, 25, 119, 125, 223, 31, 143, 182, 156, 236, 
    118, 163, 120, 49, 127, 177, 131, 70, 140, 16, 111, 213, 18, 135, 33, 
    234, 209, 0, 76, 85, 12, 249, 126, 88, 139, 19, 205, 232, 146, 244, 78, 
    26, 11, 203, 181, 65, 36, 77, 132, 108, 229, 57, 44, 176, 179, 235, 73, 48
};

static int ShuffledIndexTableX[] = {70, 69, 72, 172, 40, 211, 117, 126, 148,
    18, 112, 111, 94, 81, 250, 7, 13, 87, 50, 63, 109, 236, 61, 251, 82, 176, 
    89, 141, 42, 97, 147, 119, 246, 202, 99, 37, 24, 185, 203, 174, 201, 200, 
    45, 5, 118, 33, 230, 14, 136, 241, 208, 221, 12, 85, 78, 96, 92, 146, 173, 
    140, 253, 214, 215, 41, 36, 223, 132, 229, 165, 158, 204, 74, 199, 98, 189, 
    62, 186, 195, 193, 124, 190, 84, 220, 125, 57, 120, 157, 56, 163, 66, 164, 
    80, 239, 171, 75, 47, 64, 133, 121, 102, 160, 187, 216, 234, 238, 184, 68, 
    31, 226, 20, 108, 233, 127, 188, 252, 243, 155, 79, 169, 43, 198, 227, 17, 
    149, 76, 3, 46, 175, 222, 49, 168, 113, 228, 104, 231, 30, 179, 183, 154, 
    100, 181, 90, 131, 232, 71, 4, 206, 44, 144, 156, 213, 58, 152, 218, 197, 
    39, 1, 209, 145, 25, 2, 106, 67, 210, 10, 237, 51, 196, 21, 245, 48, 9, 
    105, 235, 167, 166, 194, 52, 247, 34, 22, 212, 249, 60, 178, 224, 153, 150, 
    225, 116, 59, 27, 93, 83, 95, 55, 53, 143, 0, 32, 219, 180, 128, 177, 248, 
    142, 170, 101, 110, 130, 129, 91, 16, 191, 28, 242, 240, 73, 77, 244, 114, 
    107, 29, 205, 134, 255, 115, 23, 54, 19, 26, 122, 159, 86, 88, 192, 38, 
    254, 123, 11, 6, 207, 151, 182, 135, 8, 138, 35, 15, 103, 161, 65, 217, 
    139, 162, 137
};

static int ShuffledIndexTableY[] = {188, 127, 170, 245, 252, 177, 2, 217, 107, 
    100, 64, 211, 51, 94, 97, 223, 9, 204, 120, 53, 184, 173, 226, 104, 105, 
    135, 92, 4, 139, 172, 169, 59, 121, 246, 133, 20, 183, 156, 6, 113, 187, 
    29, 19, 142, 56, 212, 48, 205, 114, 103, 110, 109, 1, 202, 30, 244, 37, 
    22, 166, 93, 193, 242, 222, 70, 137, 16, 81, 12, 132, 147, 210, 218, 231, 
    15, 138, 157, 178, 174, 251, 249, 119, 87, 116, 154, 227, 14, 115, 57, 
    208, 85, 247, 117, 148, 33, 131, 73, 58, 237, 144, 151, 47, 32, 111, 140, 
    123, 240, 18, 52, 26, 80, 66, 95, 83, 221, 31, 209, 35, 28, 171, 71, 78, 
    36, 180, 164, 7, 201, 215, 75, 99, 8, 214, 165, 179, 61, 72, 90, 63, 161, 
    145, 108, 89, 150, 235, 86, 243, 43, 189, 146, 11, 163, 152, 24, 194, 44, 
    41, 65, 13, 158, 136, 250, 122, 149, 130, 77, 192, 220, 106, 255, 96, 68, 
    236, 241, 23, 60, 219, 79, 112, 129, 199, 196, 69, 253, 234, 238, 5, 153, 
    206, 76, 155, 38, 190, 62, 88, 200, 25, 216, 101, 67, 191, 239, 186, 27, 
    168, 124, 195, 84, 46, 3, 54, 40, 167, 162, 181, 17, 39, 254, 159, 182, 
    34, 74, 118, 126, 176, 160, 228, 0, 248, 125, 134, 55, 229, 82, 213, 225, 
    42, 102, 143, 91, 141, 207, 175, 197, 45, 232, 50, 49, 224, 185, 10, 98, 
    230, 21, 203, 128, 198, 233
};

static int ShuffledIndexTableZ[] = {238, 1, 232, 69, 80, 227, 109, 163, 142, 
    36, 178, 228, 241, 244, 185, 44, 117, 255, 118, 98, 150, 206, 215, 250, 
    184, 106, 140, 105, 15, 154, 22, 65, 122, 174, 9, 127, 187, 195, 2, 77,
     237, 27, 81, 253, 71, 181, 102, 40, 211, 249, 55, 53, 86, 78, 160, 212, 
     47, 137, 54, 67, 161, 146, 166, 30, 63, 139, 199, 222, 219, 119, 159, 
     254, 70, 24, 157, 25, 52, 111, 217, 88, 128, 38, 87, 95, 108, 66, 56, 
     46, 136, 23, 5, 210, 124, 214, 168, 226, 132, 120, 194, 74, 11, 198, 
     103, 231, 21, 62, 245, 230, 167, 190, 7, 112, 123, 100, 94, 239, 3, 
     31, 76, 164, 13, 107, 224, 152, 48, 125, 39, 68, 135, 156, 176, 57, 
     35, 90, 0, 196, 97, 229, 16, 89, 4, 115, 41, 192, 197, 204, 143, 83, 
     144, 42, 34, 155, 180, 208, 10, 242, 104, 179, 37, 200, 101, 145, 
     149, 45, 221, 213, 182, 235, 173, 252, 236, 191, 251, 12, 72, 165, 
     246, 209, 175, 203, 20, 225, 110, 153, 189, 51, 75, 162, 240, 141, 
     186, 58, 170, 151, 247, 49, 248, 79, 172, 113, 218, 121, 171, 134, 
     82, 148, 32, 17, 130, 19, 26, 8, 243, 234, 138, 193, 129, 183, 133, 
     64, 207, 43, 216, 177, 205, 84, 92, 96, 93, 99, 169, 116, 91, 158, 
     60, 73, 61, 220, 188, 14, 233, 59, 126, 28, 50, 29, 202, 33, 147, 
     131, 114, 6, 85, 223, 18, 201
};

/**
 * A table of 256 random values, evenly distributed between -1.0 and 1.0.
 * The values in the noise permutation tables can be used to index into
 * this table to get the gradients for the noise.
 */
static float Noise1DUniformTable[] = {
    0.47451, 0.482353, 0.670588, 0.545098, 0.803922, -0.443137, -0.678431,
    0.32549, 0.45098, 0.396078, 0.905882, -0.0666667, -0.466667, 0.733333,
    0.87451, 0.568627, 0.921569, -0.584314, 0.262745, -0.670588, 0.254902,
    0.0745098, 0.647059, 0.654902, 0.858824, 0.00392157, 0.796078,
    0.333333, -0.835294, 0.498039, 0.0431373, -0.960784, 0.0117647,
    -0.286275, -0.858824, -0.717647, 0.207843, -0.639216, 0.458824,
    0.121569, 0.835294, 0.278431, -0.545098, -0.819608, 0.341176, 0.85098,
    -0.262745, -0.568627, -0.890196, 0.160784, 0.592157, 0.223529,
    -0.662745, 0.490196, 0.72549, 0.537255, -0.403922, -0.709804,
    -0.701961, -0.513726, -0.984314, 0.662745, 0.364706, -0.239216,
    -0.380392, 0.247059, -0.278431, -0.372549, -0.898039, 0.231373,
    0.992157, 0.937255, -0.647059, 0.215686, -0.34902, 0.0980392, 0.694118,
    -0.552941, -0.694118, -0.364706, -0.129412, 0.709804, 0.882353,
    -0.537255, -0.576471, 0.717647, 0.435294, 0.356863, -0.623529,
    -0.0431373, 1.0, -0.85098, -0.168627, -0.654902, -0.215686, -1.0,
    -0.411765, -0.396078, 0.443137, 0.607843, -0.027451, 0.0666667,
    0.380392, -0.0745098, 0.984314, -0.0509804, 0.929412, -0.811765,
    -0.764706, 0.137255, 0.239216, -0.32549, -0.113725, 0.411765, 0.576471,
    -0.160784, -0.803922, 0.301961, -0.796078, -0.0117647, 0.811765, 0.6,
    -0.921569, -0.6, 0.952941, -0.780392, 0.756863, -0.0823529, -0.968627,
    0.309804, 0.521569, -0.521569, 0.819608, 0.827451, -0.145098, 0.960784,
    0.168627, 0.372549, -0.992157, -0.0901961, 0.976471, -0.231373,
    -0.47451, -0.458824, -0.388235, 0.427451, 0.513726, -0.0196078,
    -0.74902, -0.270588, -0.137255, 0.945098, -0.843137, 0.184314,
    -0.905882, -0.301961, 0.615686, -0.333333, -0.482353, 0.466667,
    0.788235, -0.254902, 0.772549, -0.772549, 0.145098, 0.403922, 0.286275,
    -0.223529, -0.247059, 0.0901961, -0.741176, 0.388235, -0.0588235,
    -0.615686, -0.937255, 0.0588235, -0.631373, 0.270588, 0.560784,
    0.898039, 0.113725, -0.435294, 0.631373, 0.686275, -0.882353,
    -0.341176, 0.505882, -0.294118, -0.756863, 0.529412, -0.121569,
    0.027451, 0.584314, -0.317647, -0.866667, 0.0196078, 0.317647,
    -0.309804, -0.105882, -0.00392157, -0.945098, 0.152941, 0.678431,
    0.552941, 0.741176, -0.592157, -0.0980392, -0.152941, -0.827451,
    0.419608, 0.192157, -0.176471, 0.639216, -0.2, -0.952941, 0.0352941,
    0.890196, 0.780392, -0.929412, -0.490196, 0.866667, -0.788235,
    0.764706, -0.419608, 0.34902, 0.623529, -0.87451, -0.976471, 0.0509804,
    -0.184314, -0.427451, -0.45098, -0.607843, 0.129412, 0.294118,
    -0.192157, -0.686275, -0.356863, 0.701961, 0.74902, 0.913725, 0.843137,
    -0.560784, 0.968627, -0.72549, 0.0823529, 0.2, 0.176471, -0.505882,
    -0.207843, -0.733333, -0.913725, -0.498039, 0.105882, -0.0352941,
        -0.529412
};

/**
 * A table sampled in random order from a Gaussian(0,1) distribution
 */
static float Noise1DNormalTable1[] = {
    0.114225, 0.880691, -1.942791, 0.649401, -0.763504, 1.600784, 
    1.350857, 0.135488, 1.051229, 0.005839, 0.511317, 0.704318, 
    -0.153871, -1.311776, 0.232201, 0.209181, -0.579114, -1.151393, 
    -0.704601, 0.33563, -0.802119, 1.801338, -0.157255, 1.351115, 
    -1.566868, -1.583716, -0.063012, 2.887624, 1.143602, 0.069831, 
    0.155837, -0.868659, -0.52991, 0.30172, -0.004324, -1.825751, 
    -0.970851, 1.270601, -0.071093, 0.034548, -1.2741, -0.977124, 
    -0.875981, -0.659733, 3.036533, 1.023933, -1.127432, 0.596717, 
    1.737831, 0.972398, -0.076808, 1.616363, 0.536934, -0.136115, 
    -1.917065, -0.882024, -0.595177, -1.820271, -1.429034, 0.209247, 
    1.346581, -0.120514, -1.464939, 0.259823, -1.380303, -0.072866, 
    -1.72135, -0.784613, 1.231624, 1.180786, 0.011233, -1.942583, 
    1.12598, -1.376822, -0.133702, -0.854035, 1.313026, -0.740897, 
    -0.429628, 0.852245, -1.873475, -0.555709, -0.721609, -0.298762, 
    1.642124, 1.320332, 0.798711, 0.222456, 0.576414, 1.646671, 
    1.262382, -0.316733, -1.557875, -1.207322, 0.440726, -1.00832, 
    0.086471, -0.223893, -0.701981, 2.039578, 1.107911, 0.315631, 
    -1.238095, 0.763294, 0.048667, -0.357886, -0.049022, 0.517339, 
    1.581547, 0.752266, -1.59297, -0.912729, -1.290009, -2.293262, 
    0.386096, -0.045685, 0.797759, -0.661494, 1.0574, 1.063434, 
    -1.650813, 0.461064, -0.348987, -0.301566, 0.335087, 0.441189, 
    0.078762, -0.010136, -0.189614, 0.493738, 1.184176, 1.417272, 
    0.23082, -1.277221, -0.205798, -0.190635, 0.628948, 0.597304, 
    -0.455798, -1.087369, 0.850901, 0.056558, -0.380082, -0.173505, 
    -0.980786, -2.102592, 0.934881, -0.222862, -0.494738, -1.743385, 
    1.300785, 0.992368, -0.072876, 1.033605, -0.966487, 1.436671, 
    2.616156, 0.241706, -1.943687, 0.707941, 0.676852, 0.373377, 
    0.362314, 0.311964, 1.423386, 0.16143, 1.195297, -0.87903, 
    -0.193141, -0.140594, 0.638478, -0.764339, 0.57889, -0.034764, 
    1.16364, -1.159016, 0.503156, 0.368457, 0.563675, -0.234154, 
    -0.046881, 0.758632, 0.688012, -0.123162, -0.893632, -1.278531, 
    0.488807, -0.159393, 1.010586, 1.632159, 0.579213, -0.164115, 
    0.562968, -0.304052, -0.855916, -1.866714, 1.949461, -0.979781, 
    1.286788, 0.104513, 1.674909, -0.424058, 0.126555, -0.179944, 
    0.586274, 1.183851, -0.150953, -1.336704, 1.424613, -1.401835, 
    -0.441383, 0.011014, -0.07033, -0.485669, 0.365993, 1.314338, 
    0.803436, -1.067268, -0.530214, -0.401371, -1.726908, -0.473959, 
    -0.781643, -1.301174, 1.310284, -0.719355, -1.335386, -0.067632, 
    -0.740827, -0.253678, -0.104838, -1.753989, -2.40605, 0.188759, 
    -0.963815, 0.454146, 0.671177, -0.318547, -0.155485, 1.251227, 
    2.248338, 0.137585, 0.876437, 0.405635, -0.141453, 1.232505, 
    -0.538818, -0.312899, 0.691557, -0.209327, -0.177253, -0.332886, 
    -1.70778, 0.87717, -1.021209, -0.184414
};

void
getShufflePositionTables(int** shuffle1, int** shuffle2, int** shuffle3){

    *shuffle1 = ShuffledIndexTableX;
    *shuffle2 = ShuffledIndexTableY;
    *shuffle3 = ShuffledIndexTableZ;
}

void
getShuffleAngleTables(int** shuffle4, int** shuffle5, int** shuffle6){
    *shuffle4 = ShuffledIndexTableRoll;
    *shuffle5 = ShuffledIndexTablePitch;
    *shuffle6 = ShuffledIndexTableYaw;
}

void
getNoiseTables(float** noise1, float** noise2) {
    *noise1 = Noise1DUniformTable;
    *noise2 = Noise1DNormalTable1;
}

